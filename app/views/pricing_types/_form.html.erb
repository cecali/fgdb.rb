  <p>
    <%= f.label :name %><br />
    <%= f.text_field :name %>
  </p>
  <p>
    <%= f.label :round_by, "Round By (dollar increments, or 0.00 for no rounding)" %><br />
    <%= f.text_field :round_by %>
  </p>
  <p>
    <%= f.label :gizmo_type_id, "Gizmo Type (falls back to printme type if blank)" %><br />
    <%= f.select :gizmo_type_id, [["<to set automatically during sales entry>", nil]] + GizmoContext.sale.gizmo_types.sort_by(&:description).map{|x| [x.description, x.id]} %>
  </p>
  <p>
    <%= f.label :type_ids, "Build Type (optional for automatic detection)" %><br />
    <%= f.select :type_ids, Type.all.map{|x| [x.name.titleize, x.id]}, {}, {:multiple => true} %>
  </p>
  <p>
    <%= f.label :pull_from, "Pulled Value to Match Against" %><br />
    <%= f.select :pull_from, [["<optional for automatic detection>", nil]] + SystemPricing.valid_pulls.map{|x| [x.to_s.titleize, x.to_s]} %>
  </p>
  <p>
    <%= f.label :matcher, "Value to Match Pulled Value Against (if a pulled value is chosen)" %><br />
    <%= f.text_field :matcher %>
  </p>
<% if f.object.id %>
<div class="form-element" style="clear: both">
  To add a new or existing component to this pricing type:
</div>
  <% PricingComponent.all.each do |x| %>
      <% field_id = "pricing_component_#{x.id}" %>
      <div class="form-element" style="clear: both">
      <%# check_box_tag "#{f.object_name}[pricing_component_ids][]", x.id, f.object.pricing_components.include?(x), {:id => field_id} -%>
      <%= label_tag field_id, x.display_name -%>
      <%= link_to "Edit", :action => "edit", :id => x.id, :controller => "pricing_components" %>
      </div><br />
  <% end %>
  <div class="form-element" style="clear: both">
    <%= link_to "Create a new component", {:action => "new", :pricing_type_id => f.object.id, :controller => "pricing_components"} %>
  </div>
<% end %>
