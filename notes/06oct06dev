
#===========================================================
### roadmap for 10 oct
TODO
----

. ? rails unique-id generator

. add ajax logic to manage donation fee-tracking calc/display
    . some special elements that we are using to track fees, etc
    . needs some id-related changes in datalist_for to be able to 
    identify and group the data input elements that we track

. consider contact attributes:  preferred_contact_method_id
  . maybe add a radio button set going against bridge table

. integrate datalist_for with situation where two layers of
belongs_to associations exist under the parent
  . eg, GizmoEvent belongs to DonationLine belongs to Donation

### 06 oct
DONE
----

. Create prototype search box for contacts using ajax to allow
switching back and forth between entering a search string and
choosing a search result.
  
  . What is the basic flow of the prototype?  
    (Contacts is the controller in whose context what is described
    below occurs.)

    . navigate to /contacts/search
      . ContactsController#search renders search.rhtml:

        . encloses query elements that reside in the partial
        _searchbox_field.rhtml inside a div whose id="A" is set
        by means of instance var @contact_searchbox_id
          . input field for freeform query string entry with id="A_1"
          . "submit" button that calls custom JS fcn (read on)

        . includes custom JS fcn "contact_searchbox_submit"
        created using "javascript_tag" method which submits an
        Ajax.Request request with params to #do_search when the
        submit button is pressed

          . The created JS fcn looks like this:
            function contact_searchbox_submit() {
              var field_val = $('contact_searchbox_id_field').value;
                new Ajax.Request('/contacts/do_search/?query=' +
                field_val + '&searchbox_id=contact_searchbox_id',
                {asynchronous:true, evalScripts:true});
            }

    . ContactsController#do_search gets values for both the
    query and the div id from the params passed in the URL
    submitted above by the Ajax.Request call.

      . calls Contact#search with query value, puts resulting
      array into @search_results
      . uses passed div id ("A") to compose an id ("A_1") that
      is now attached in _search_dropdown.rhtml to a dropdown
      select element

      . renders the search_dropdown partial which contains
      @search_results as well as an option with value "__search
      again__" that ultimately will call #insert_searchbox to
      redisplay the search query input box

        . employs the observe_field fcn from Prototype.js to
        watch for a change in the dropdown select element, and
        on change will make this ajax call:
        /contacts/insert_searchbox/searchbox_id=@contact_searchbox_id

          . (in this early prototype the choice of any
          option besides the initially displayed one leads to
          calling #insert_searchbox since we are merely
          detecting _any_ change to the dropdown selected value)

    . ContactsController#insert_searchbox gets value for the
    original div id from params

      . uses passed div id ("A") to compose an id ("A_1") that
      is once again attached in _searchbox_field.rhtml via
      instance var @contact_searchbox_field_id to the
      original input field for the freeform query string

      . renders the 'searchbox_field' partial with inline rjs
      call to 'replace_html' whose value replaces the contents
      ("innerHTML") of the div "A" (ie, @contact_searchbox_id);
      the guts of the call is this fragment:
        .  page.replace_html @contact_searchbox_id, :partial => 'searchbox_field'

    . At this point we have restored the contents of the "A" div
    to their value originally set in the call to /contacts/search
