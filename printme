#!/usr/bin/ruby

#MINE!

require '/usr/lib/ruby/1.8/lib/xmlsimple.rb'
require 'net/http'
require 'cgi'
require 'uri'
require 'rubytui'
require 'fileutils'
include FileUtils
include RubyTUI

trap( "SIGINT" ) {
    `reset -Q`
    errorMessage "\n\nUser interrupt caught.  Exiting.\n\n"
    exit!( 1 )
}

module Multipart
  # From: http://kfahlgren.com/code/multipart.rb
  class Param
    attr_accessor :k, :v
    def initialize( k, v )
      @k = k
      @v = v
    end

    def to_multipart
      return "Content-Disposition: form-data; name=\"#{CGI::escape k}\"\r\n\r\n#{v}\r\n"
    end
  end
  class FileParam
    attr_accessor :k, :filename, :content
    def initialize( k, filename, content )
      @k = k
      @filename = filename
      @content = content
    end

    def to_multipart
      # Don't escape mine
      return "Content-Disposition: form-data; name=\"#{k}\"; filename=\"#{filename}\"\r\n" + "Content-Transfer-Encoding: binary\r\n" + "Content-Type: application/xml\r\n\r\n" + content + "\r\n"
    end
  end
  class MultipartPost
    BOUNDARY = 'tarsiers-rule0000'
    HEADER = {"Content-type" => "multipart/form-data, boundary=" + BOUNDARY + " "}

    def prepare_query (params)
      fp = []
      params.each {|k,v|
        if v.respond_to?(:read)
          fp.push(FileParam.new(k, v.path, v.read))
        else
          fp.push(Param.new(k,v))
        end
      }
      query = fp.collect {|p| "--" + BOUNDARY + "\r\n" + p.to_multipart }.join("") + "--" + BOUNDARY + "--"
      return query, HEADER
    end
  end  
end

TIMEOUT_SECONDS = 30
def post_form(url, query, headers)
  Net::HTTP.start(url.host, url.port) { |con|
    con.read_timeout = TIMEOUT_SECONDS
    begin
      return con.post(url.path, query, headers)
    rescue => e
      puts "POSTING Failed #{ e}... #{Time.now}"
    end
  }
end

def run_lshw_and_test_stuff
  server="printme.fglan"
  retval = system("ping -c 1 " + server + " 1>&2 >/dev/null")
  if retval != true
    errorMessage "I could not connect to the server.\nMake sure you are connected to the network and try again.\n\n"
    exit retval
  end
  lshwname = @lshwname = '/var/lib/freegeek-extras/printme/lshw.xml'
  if(!File.exist?(lshwname))
    system("sudo lshw -xml>#{lshwname}") 
    retval = system("xmlstarlet val " + lshwname + " >& /dev/null")
    if retval != true
      system("cat " + lshwname + " | tr -dc [:print:] | xmlstarlet fo > " + lshwname + ".clean")
      mv(lshwname + ".clean", lshwname)
      newretval = system("xmlstarlet val " + lshwname + " >& /dev/null")
      if newretval != true
        errorMessage "The xml file is not valid and I could not fix it!\n"
        errorMessage "Ask a build instructor for help.\n"
        exit 1
      end
    end
  end
end

def get_id_and_stuff
  if File.exist?('/tmp/lshw.xml') #old printme has been ran
    if ! File.exist?('/var/lib/freegeek-extras/')
      mkdir('/var/lib/freegeek-extras/')
    end
    mkdir('/var/lib/freegeek-extras/printme/')
    mv('/tmp/lshw.xml', '/var/lib/freegeek-extras/printme/lshw.xml.old')
    old_id = prompt('If the system had an id on it already, enter that here',
                  'Please supply a number or nothing at all') {|num| num.empty? or (num.to_i.to_s == num)}
    response = Net::HTTP.get_response(URI.parse("http://jetty:3000/systems/xml_show?id=#{old_id}"))
    system=File.open('/var/lib/freegeek-extras/printme/system.xml', 'w')
    system.puts(response.body)
    puts "Downloading old information..."
    @system_id=XmlSimple.xml_in(system)["id"][0]["content"].to_i
    list_of_reports = []
    XmlSimple.xml_in(Net::HTTP.get_response(URI.parse("http://jetty:3000/reports/xml_list_for_system?id=#{@system_id}")).body)["report"].each { |x| list_of_reports << x["id"][0]["content"] }
    for report in list_of_reports
      this_report = open('/var/lib/freegeek-extras/printme/report.#{report}.xml', 'w')
      this_report.write(Net::HTTP.get_response(URI.parse("http://jetty:3000/reports/xml_show/#{report}")).body)
      this_report.close
    end
    puts "Done!"
  elsif File.exist?('/var/lib/freegeek-extras/printme/') #new printme has been ran
    system = File.open('/var/lib/freegeek-extras/printme/system.xml', 'r')
  else #no printme has been ran
    if ! File.exists?('/var/lib/freegeek-extras/printme/')
      mkdir('/var/lib/freegeek-extras/')
    end
    mkdir('/var/lib/freegeek-extras/printme')
    response = Net::HTTP.get_response(URI.parse("http://jetty:3000/systems/xml_new"))
    system=File.open('/var/lib/freegeek-extras/printme/system.xml.new', 'w')
    system.puts(response.body)
  end
  jobs_xml = XmlSimple.xml_in(Net::HTTP.get_response(URI.parse("http://jetty:3000/roles/xml_index")).body)
  types_xml = XmlSimple.xml_in(Net::HTTP.get_response(URI.parse("http://jetty:3000/types/xml_index")).body)

  @jobs={}
  @types={}

  jobs_xml["role"].each { |x| @jobs[x["name"][0]] = x["id"][0]["content"].to_i if x.class == Hash }
  types_xml["type"].each { |x| @types[x["name"][0]] = x["id"][0]["content"].to_i if x.class == Hash }

  @system_id ||= XmlSimple.xml_in(system)["id"][0]["content"].to_i
  system.close
end

require 'pp' ###################REMOVE ME####################

def ask_and_send_stuff
  server="printme.fglan:3000"
  ###COPY AND PASTE FROM THE OLD ONE (YOU NEED LOTS OF MODIFICATIONS TOO THOUGH, LIKE GET AND MOVE SYSTEM AND REPORT AND LSHW, AND ENSTEAD OF SAVING THE RESPONE, POINT THERE BROWSER AT THE SHOW ACTION)
job = menuWithDefault('Work Tasks', 'Which job did you perform?', "Quality Control", *@jobs.keys)
type = menuWithDefault('System Type', 'What kind of system is this intended to be?', 'Low End', *@types.keys)
uid = prompt('What is your volunteer id?', 'Please enter a number.') {|num| num.to_i.to_s == num}
notes = prompt('What, if anything, is notable about this system?')


lshw = File.open(@lshwname, "rb")
codename = `lsb_release --description --short`
data = {
  "contact_id" => uid,
  "role_id" => @jobs[job],
  "type_id" => @types[type],
  "system_id" => @system_id,
  "notes" => notes,
  "my_file" => lshw,
  "os" => codename
}

url = "http://" + server + "/reports/xml_create"
uri = URI.parse(url)

mp = Multipart::MultipartPost.new
query, headers = mp.prepare_query(data)
lshw.close

response = post_form(uri, query, headers)
@report_id=XmlSimple.xml_in(response.body)["id"][0]["content"]
@system_id=XmlSimple.xml_in(response.body)["system_id"][0]["content"]
printme = "/var/lib/freegeek-extras/printme/report.#{@report_id}.xml"
f = open(printme,'w')
f.write(response.body)
f.close()

  response = Net::HTTP.get_response(URI.parse("http://jetty:3000/systems/xml_show?id=#{system_id}"))
  system=File.open('/var/lib/freegeek-extras/printme/system.xml', 'w')
  system.puts(response.body)
  system.close
end

def main
  get_id_and_stuff
  run_lshw_and_test_stuff
  ask_and_send_stuff
  puts "firefox http://jetty:3000/reports/show/#{@report_id}"
end

main
